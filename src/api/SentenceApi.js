/**
 * Fabulator API
 * Endpoint Fabulator project
 *
 * OpenAPI spec version: 1.0.0
 * Contact: torloneg@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Model15', 'model/Model7'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Model15'), require('../model/Model7'));
  } else {
    // Browser globals (root is window)
    if (!root.FabulatorApi) {
      root.FabulatorApi = {};
    }
    root.FabulatorApi.SentenceApi = factory(root.FabulatorApi.ApiClient, root.FabulatorApi.Model15, root.FabulatorApi.Model7);
  }
}(this, function(ApiClient, Model15, Model7) {
  'use strict';

  /**
   * Sentence service.
   * @module api/SentenceApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SentenceApi. 
   * @alias module:api/SentenceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteSentenceV1IdruleId operation.
     * @callback module:api/SentenceApi~deleteSentenceV1IdruleIdCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idrule 
     * @param {String} id 
     * @param {module:api/SentenceApi~deleteSentenceV1IdruleIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.deleteSentenceV1IdruleId = function(idrule, id, callback) {
      var postBody = null;

      // verify the required parameter 'idrule' is set
      if (idrule === undefined || idrule === null) {
        throw new Error("Missing the required parameter 'idrule' when calling deleteSentenceV1IdruleId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSentenceV1IdruleId");
      }


      var pathParams = {
        'idrule': idrule,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/sentence/v1/{idrule}/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSentenceV1InfoIdruleId operation.
     * @callback module:api/SentenceApi~getSentenceV1InfoIdruleIdCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idrule 
     * @param {String} id 
     * @param {module:api/SentenceApi~getSentenceV1InfoIdruleIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getSentenceV1InfoIdruleId = function(idrule, id, callback) {
      var postBody = null;

      // verify the required parameter 'idrule' is set
      if (idrule === undefined || idrule === null) {
        throw new Error("Missing the required parameter 'idrule' when calling getSentenceV1InfoIdruleId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSentenceV1InfoIdruleId");
      }


      var pathParams = {
        'idrule': idrule,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/sentence/v1/info/{idrule}/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSentenceV1AddIdrule operation.
     * @callback module:api/SentenceApi~postSentenceV1AddIdruleCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idrule 
     * @param {Object} opts Optional parameters
     * @param {module:model/Model7} opts.body 
     * @param {module:api/SentenceApi~postSentenceV1AddIdruleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.postSentenceV1AddIdrule = function(idrule, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'idrule' is set
      if (idrule === undefined || idrule === null) {
        throw new Error("Missing the required parameter 'idrule' when calling postSentenceV1AddIdrule");
      }


      var pathParams = {
        'idrule': idrule
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/sentence/v1/add/{idrule}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putSentenceV1UpdateIdruleId operation.
     * @callback module:api/SentenceApi~putSentenceV1UpdateIdruleIdCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} idrule 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Model15} opts.body 
     * @param {module:api/SentenceApi~putSentenceV1UpdateIdruleIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.putSentenceV1UpdateIdruleId = function(idrule, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'idrule' is set
      if (idrule === undefined || idrule === null) {
        throw new Error("Missing the required parameter 'idrule' when calling putSentenceV1UpdateIdruleId");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putSentenceV1UpdateIdruleId");
      }


      var pathParams = {
        'idrule': idrule,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/sentence/v1/update/{idrule}/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
